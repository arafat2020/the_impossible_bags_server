// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SELLER
}

model User {
  id       String        @id @default(uuid())
  name     String
  email    String        @unique
  password String
  Reviews  Reviews[]
  role     UserRole      @default(USER)
  Shop     Shop[]
  Billing  Billing[]
  img      FileInstance?
  wWshList wWshList?
  stripeAccount String?
}

model wWshList {
  id       String    @id @default(uuid())
  userId   String?   @unique
  user     User?     @relation(fields: [userId], references: [id])
  products Product[]
}

model Shop {
  id       String    @id @default(uuid())
  name     String
  products Product[]
  ownerId  String
  owner    User      @relation(fields: [ownerId], references: [id])
}

model Product {
  id            String         @id @default(uuid())
  name          String
  description   String
  price         Float
  quantity      Int
  primaryImg    FileInstance?
  showcaseImage ShowcaseImage?
  tag           String[]
  color         String[]
  Designer      Designer?      @relation(fields: [designerId], references: [id])
  designerId    String?
  type          Type?          @relation(fields: [typeId], references: [id])
  typeId        String?
  Reviews       Reviews[]
  Shop          Shop?          @relation(fields: [shopId], references: [id])
  shopId        String?
  wWshList      wWshList?      @relation(fields: [wWshListId], references: [id])
  wWshListId    String?
  Billing       Billing?       @relation(fields: [billingId], references: [id])
  billingId     String?
}

model Designer {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Type {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Reviews {
  id        String  @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}

model Contact {
  id          String @id @default(uuid())
  firstName   String
  lastName    String
  phoneNumber Int
  email       String
  message     String
}

model Billing {
  id         String    @id @default(uuid())
  userId     String
  cardNumber String
  product    Product[]
  user       User      @relation(fields: [userId], references: [id])
  billingId  String
}

model ShowcaseImage {
  id        String         @id @default(uuid())
  file      FileInstance[]
  Product   Product?       @relation(fields: [productId], references: [id])
  productId String?        @unique
}

model FileInstance {
  id              String         @id @default(uuid())
  fileUrl         String
  fileId          String
  bucket          String
  createdAt       DateTime       @default(now())
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?        @unique
  primaryImg      Product?       @relation(fields: [primaryImgId], references: [id])
  primaryImgId    String?        @unique
  ShowcaseImage   ShowcaseImage? @relation(fields: [showcaseImageId], references: [id])
  showcaseImageId String?
}
